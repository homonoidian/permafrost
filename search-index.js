crystal_doc_search_index_callback({"repository_name":"permafrost","body":"# permafrost\n\nPermafrost implements a (relatively) fast unordered persistent map. Plus a set\nand a bidirectional map based on the map.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     permafrost:\n       github: homonoidian/permafrost\n   ```\n\n2. Run `shards install`\n\n## Usage\n\nI implemented most useful stuff (?) from `Hash` and `Set`. `BidiMap` is mostly for myself\nso you may forget it exists :) All in all refer to [the docs](https://homonoidian.github.io/permafrost/).\n\n```crystal\nrequire \"permafrost\"\n\nmap = Pf::Map[foo: 100, bar: 200]\nmap[\"foo\"]? # => 100\nmap[\"bar\"]? # => 200\n\nmap.assoc(\"baz\", 300) # => Pf::Map{\"foo\" => 100, \"bar\" => 200, \"baz\" => 300}\nmap                   # => Pf::Map{\"foo\" => 100, \"bar\" => 200}\n\nmap.dissoc(\"foo\") # => Pf::Map{\"bar\" => 200}\nmap               # => Pf::Map{\"foo\" => 100, \"bar\" => 200}\n```\n\n## Performance\n\nYou can run the benchmark file, `bench.cr`, for a (very dumb and useless) benchmark\nof the map vs. what we consider the speed-of-light implementation, `Hash`, and what\nseems to be our only competitor, `Immutable::Map` from the wonderful shard [Immutable](https://github.com/lucaong/immutable).\nThe latter you'd have to install somehow, maybe by cloning this repo and modifying\n`shard.yml` directly.\n\nNote that each benchmark run you'd get (somewhat) different results depending on how\ngood the hash seed was, which is picked by Crystal randomly. I haven't found a way\nto reliably disable that. If you know how let me know, maybe make a PR or something.\n\n```text\n                   add speed of light 246.08  (  4.06ms) (±10.20%)  4.75MB/op    3996.95× slower\n          add + delete speed of light 180.79  (  5.53ms) (±13.95%)  4.75MB/op    5440.44× slower\n                  each speed of light   5.99k (166.85µs) (± 0.06%)    0.0B/op     164.11× slower\n                          pf::map add  11.27  ( 88.75ms) (±15.27%)  94.8MB/op   87291.70× slower\n                 pf::map add + delete   5.45  (183.59ms) (± 7.59%)   185MB/op  180574.80× slower\n                       pf::map add tx  81.73  ( 12.24ms) (±21.03%)  4.73MB/op   12034.54× slower\n              pf::map add + delete tx  50.65  ( 19.74ms) (±16.36%)  4.73MB/op   19418.83× slower\n                         pf::map each 666.27  (  1.50ms) (± 1.96%)  2.27kB/op    1476.23× slower\n                   immutable::map add   3.42  (292.54ms) (±12.00%)   219MB/op  287731.67× slower\n          immutable::map add + delete   1.68  (595.51ms) (± 2.07%)   373MB/op  585727.94× slower\n         immutable::map add transient   6.06  (165.15ms) (±11.56%)   101MB/op  162433.23× slower\nimmutable::map add + delete transient   3.28  (304.88ms) (± 2.18%)   134MB/op  299866.65× slower\n                  immutable::map each   7.05  (141.87ms) (± 9.33%)  87.4MB/op  139537.29× slower\n```\n\nThe ± numbers being so big smells weird, but the results clearly show the winner! Note how\nmemory use is almost the same between `Pf::Map` with transactions and `Hash`.\n\nAgain, I picked this run among others because it is the fastest. With a different hash seed,\nyou'll get different results, faster or slower than those presented here.\n\n## Development\n\nThe implementation is pretty simple, it's found in `src/permafrost/core/node.cr`.\nIf you find any errors please let me know or (even better!) fix them yourself and\nsubmit a PR. Same with new features. New methods for `Pf::Map`, `Pf::Set` and `Pf::BidiMap` are especially welcome.\n\n\n## See also\n\nI've no clue whether what I've written truly is a HAMT or not, as long\nas it works I'm fine. For reference, here are some HAMTs that consider themselves HAMTs:\n\n- [Immutable](https://github.com/lucaong/immutable)\n- [HAMT for C with good internals explanation](https://github.com/mkirchner/hamt)\n- [Clojure's PersistentHashMap](https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/PersistentHashMap.java)\n- etc.\n\n## Contributing\n\n1. Fork it (<https://github.com/homonoidian/permafrost/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Alexey Yurchenko](https://github.com/homonoidian) - creator and maintainer\n","program":{"html_id":"permafrost/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"permafrost","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"permafrost/Enumerable","path":"Enumerable.html","kind":"module","full_name":"Enumerable(T)","name":"Enumerable","abstract":false,"locations":[{"filename":"src/permafrost/ext.cr","line_number":1,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/ext.cr#L1"}],"repository_name":"permafrost","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"permafrost/Pf/BidiMap","kind":"struct","full_name":"Pf::BidiMap(K, V)","name":"BidiMap"},{"html_id":"permafrost/Pf/Map","kind":"struct","full_name":"Pf::Map(K, V)","name":"Map"},{"html_id":"permafrost/Pf/Set","kind":"struct","full_name":"Pf::Set(T)","name":"Set"}],"doc":"The `Enumerable` mixin provides collection classes with several traversal, searching,\nfiltering and querying methods.\n\nIncluding types must provide an `each` method, which yields successive members\nof the collection.\n\nFor example:\n\n```\nclass Three\n  include Enumerable(Int32)\n\n  def each(&)\n    yield 1\n    yield 2\n    yield 3\n  end\nend\n\nthree = Three.new\nthree.to_a                # => [1, 2, 3]\nthree.select &.odd?       # => [1, 3]\nthree.all? { |x| x < 10 } # => true\n```\n\nNote that most search and filter methods traverse an Enumerable eagerly,\nproducing an `Array` as the result. For a lazy alternative refer to\nthe `Iterator` and `Iterable` modules.","summary":"<p>The <code><a href=\"Enumerable.html\">Enumerable</a></code> mixin provides collection classes with several traversal, searching, filtering and querying methods.</p>","instance_methods":[{"html_id":"to_pf_bidi-instance-method","name":"to_pf_bidi","doc":"Like `to_pf_map`, but creates a `Pf::BidiMap`.\n\n```\n(0...10).zip('a'...'z').to_pf_bidi # => Pf::BidiMap{0 <=> 'a', 1 <=> 'b', 2 <=> 'c', ...}\n```","summary":"<p>Like <code><a href=\"Enumerable.html#to_pf_map%28%26%3AT-%3ETuple%28K%2CV%29%29%3APf%3A%3AMap%28K%2CV%29forallK%2CV-instance-method\">#to_pf_map</a></code>, but creates a <code><a href=\"Pf/BidiMap.html\">Pf::BidiMap</a></code>.</p>","abstract":false,"location":{"filename":"src/permafrost/ext.cr","line_number":38,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/ext.cr#L38"},"def":{"name":"to_pf_bidi","visibility":"Public","body":"Pf::BidiMap.new(self)"}},{"html_id":"to_pf_map(&:T->Tuple(K,V)):Pf::Map(K,V)forallK,V-instance-method","name":"to_pf_map","doc":"Creates a `Pf::Map` out of `{key, value}` tuple pairs returned\nby the block.\n\n```\n(0...10).to_pf_map { |n| {n, n * 2} } # => Pf::Map{2 => 4, 3 => 6, 4 => 8, ...}\n```","summary":"<p>Creates a <code><a href=\"Pf/Map.html\">Pf::Map</a></code> out of <code>{key, value}</code> tuple pairs returned by the block.</p>","abstract":false,"location":{"filename":"src/permafrost/ext.cr","line_number":8,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/ext.cr#L8"},"def":{"name":"to_pf_map","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(T -> ::Tuple(K, V))"},"return_type":"Pf::Map(K, V)","visibility":"Public","body":"Pf::Map(K, V).transaction do |commit|\n  each do |el|\n    commit.assoc(*yield el)\n  end\nend"}},{"html_id":"to_pf_map-instance-method","name":"to_pf_map","doc":"Creates a `Pf::Map` out of an Enumerable whose elements respond\nto `.[0]` and `.[1]`.\n\n```\n(0...10).zip('a'..'z').to_pf_map # => Pf::Map{0 => 'a', 1 => 'b', 2 => 'c', ...}\n```","summary":"<p>Creates a <code><a href=\"Pf/Map.html\">Pf::Map</a></code> out of an Enumerable whose elements respond to <code>.[0]</code> and <code>.[1]</code>.</p>","abstract":false,"location":{"filename":"src/permafrost/ext.cr","line_number":20,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/ext.cr#L20"},"def":{"name":"to_pf_map","visibility":"Public","body":"Pf::Map.new(self)"}},{"html_id":"to_pf_set:Pf::Set(T)-instance-method","name":"to_pf_set","doc":"Creates a `Pf::Set` out of an Enumerable.\n\n```\n(0...5).to_pf_set # => Pf::Set[0, 1, 2, 3, 4]\n```","summary":"<p>Creates a <code><a href=\"Pf/Set.html\">Pf::Set</a></code> out of an Enumerable.</p>","abstract":false,"location":{"filename":"src/permafrost/ext.cr","line_number":29,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/ext.cr#L29"},"def":{"name":"to_pf_set","return_type":"Pf::Set(T)","visibility":"Public","body":"Pf::Set.new(self)"}}]},{"html_id":"permafrost/Pf","path":"Pf.html","kind":"module","full_name":"Pf","name":"Pf","abstract":false,"locations":[{"filename":"src/permafrost.cr","line_number":8,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost.cr#L8"},{"filename":"src/permafrost/bidi_map.cr","line_number":1,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/bidi_map.cr#L1"},{"filename":"src/permafrost/core/node.cr","line_number":1,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/core/node.cr#L1"},{"filename":"src/permafrost/error.cr","line_number":1,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/error.cr#L1"},{"filename":"src/permafrost/map.cr","line_number":1,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L1"},{"filename":"src/permafrost/set.cr","line_number":1,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/set.cr#L1"}],"repository_name":"permafrost","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.3\""}],"types":[{"html_id":"permafrost/Pf/BidiMap","path":"Pf/BidiMap.html","kind":"struct","full_name":"Pf::BidiMap(K, V)","name":"BidiMap","abstract":false,"superclass":{"html_id":"permafrost/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"permafrost/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"permafrost/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"permafrost/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"permafrost/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/permafrost/bidi_map.cr","line_number":5,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/bidi_map.cr#L5"}],"repository_name":"permafrost","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"permafrost/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"}],"namespace":{"html_id":"permafrost/Pf","kind":"module","full_name":"Pf","name":"Pf"},"doc":"A thread-safe, persistent, unordered bidirectional map.\n\nSee also: `Map`.","summary":"<p>A thread-safe, persistent, unordered bidirectional map.</p>","class_methods":[{"html_id":"assoc(key:K,value:V):BidiMap(K,V)-class-method","name":"assoc","doc":"A shorthand for `new.assoc`.","summary":"<p>A shorthand for <code>new.assoc</code>.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"K"},{"name":"value","external_name":"value","restriction":"V"}],"args_string":"(key : K, value : V) : BidiMap(K, V)","args_html":"(key : K, value : V) : <a href=\"../Pf/BidiMap.html\">BidiMap</a>(K, V)","location":{"filename":"src/permafrost/bidi_map.cr","line_number":27,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/bidi_map.cr#L27"},"def":{"name":"assoc","args":[{"name":"key","external_name":"key","restriction":"K"},{"name":"value","external_name":"value","restriction":"V"}],"return_type":"BidiMap(K, V)","visibility":"Public","body":"BidiMap(K, V).new.assoc(key, value)"}}],"constructors":[{"html_id":"new(enumerable:Enumerable(Tuple(K,V))):BidiMap(K,V)-class-method","name":"new","doc":"Returns a map with mappings from an *enumerable* of key-value pairs.","summary":"<p>Returns a map with mappings from an <em>enumerable</em> of key-value pairs.</p>","abstract":false,"args":[{"name":"enumerable","external_name":"enumerable","restriction":"Enumerable(::Tuple(K, V))"}],"args_string":"(enumerable : Enumerable(Tuple(K, V))) : BidiMap(K, V)","args_html":"(enumerable : <a href=\"../Enumerable.html\">Enumerable</a>(Tuple(K, V))) : <a href=\"../Pf/BidiMap.html\">BidiMap</a>(K, V)","location":{"filename":"src/permafrost/bidi_map.cr","line_number":22,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/bidi_map.cr#L22"},"def":{"name":"new","args":[{"name":"enumerable","external_name":"enumerable","restriction":"Enumerable(::Tuple(K, V))"}],"return_type":"BidiMap(K, V)","visibility":"Public","body":"enumerable.reduce(BidiMap(K, V).new) do |bidi, __temp_50|\n  k, v = __temp_50\n  bidi.assoc(k, v)\nend"}},{"html_id":"new:BidiMap(K,V)-class-method","name":"new","doc":"Returns a new empty `BidiMap`.\n\n```\nbidi = Pf::BidiMap(String, Int32).new\nbidi.empty? # => true\n```","summary":"<p>Returns a new empty <code><a href=\"../Pf/BidiMap.html\">BidiMap</a></code>.</p>","abstract":false,"location":{"filename":"src/permafrost/bidi_map.cr","line_number":17,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/bidi_map.cr#L17"},"def":{"name":"new","return_type":"BidiMap(K, V)","visibility":"Public","body":"new(valueof: Pf::Map(K, V).new, keyof: Pf::Map(V, K).new)"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","doc":"Returns `true` if the bidirectional maps are equal.","summary":"<p>Returns <code>true</code> if the bidirectional maps are equal.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","location":{"filename":"src/permafrost/bidi_map.cr","line_number":190,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/bidi_map.cr#L190"},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if @valueof == (other.@valueof)\nelse\n  return false\nend\nif @keyof == (other.@keyof)\nelse\n  return false\nend\ntrue\n"}},{"html_id":"assoc(key:K,value:V):BidiMap(K,V)-instance-method","name":"assoc","doc":"Returns a copy of `self` that contains the mapping of *key* to\n*value*. and of *value* to *key*.\n\n*Supports value equality*.\n\n```\nbidi = Pf::BidiMap(String, Int32).new\nbidi.assoc(\"hello\", 100) # => Pf::BidiMap{\"hello\" <=> 100}\n```","summary":"<p>Returns a copy of <code>self</code> that contains the mapping of <em>key</em> to <em>value</em>.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"K"},{"name":"value","external_name":"value","restriction":"V"}],"args_string":"(key : K, value : V) : BidiMap(K, V)","args_html":"(key : K, value : V) : <a href=\"../Pf/BidiMap.html\">BidiMap</a>(K, V)","location":{"filename":"src/permafrost/bidi_map.cr","line_number":131,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/bidi_map.cr#L131"},"def":{"name":"assoc","args":[{"name":"key","external_name":"key","restriction":"K"},{"name":"value","external_name":"value","restriction":"V"}],"return_type":"BidiMap(K, V)","visibility":"Public","body":"if v = value_for?(key)\n  if Map.eqv?(v, value)\n    return self\n  end\n  keyof = @keyof.dissoc(v)\nelse\n  keyof = @keyof\nend\nvalueof = (k = key_for?(value)) ? @valueof.dissoc(k) : @valueof\nBidiMap.new(valueof.assoc(key, value), keyof.assoc(value, key))\n"}},{"html_id":"dissoc_by_key(key:K):BidiMap(K,V)-instance-method","name":"dissoc_by_key","doc":"Returns a copy of `self` which is guaranteed not to have a mapping\nwith the given *key*.\n\n```\nbidi = Pf::BidiMap.assoc(:foo, 100).assoc(:bar, 200)\nbidi.dissoc_by_key(:foo) # => Pf::BidiMap{:bar <=> 200}\n```","summary":"<p>Returns a copy of <code>self</code> which is guaranteed not to have a mapping with the given <em>key</em>.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"K"}],"args_string":"(key : K) : BidiMap(K, V)","args_html":"(key : K) : <a href=\"../Pf/BidiMap.html\">BidiMap</a>(K, V)","location":{"filename":"src/permafrost/bidi_map.cr","line_number":151,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/bidi_map.cr#L151"},"def":{"name":"dissoc_by_key","args":[{"name":"key","external_name":"key","restriction":"K"}],"return_type":"BidiMap(K, V)","visibility":"Public","body":"if value = value_for?(key)\nelse\n  return self\nend\nBidiMap.new(@valueof.dissoc(key), @keyof.dissoc(value))\n"}},{"html_id":"dissoc_by_value(value:V):BidiMap(K,V)-instance-method","name":"dissoc_by_value","doc":"Returns a copy of `self` which is guaranteed not to have a mapping\nwith the given *value*.\n\n```\nbidi = Pf::BidiMap.assoc(:foo, 100).assoc(:bar, 200)\nbidi.dissoc_by_value(200) # => Pf::BidiMap{:foo <=> 100}\n```","summary":"<p>Returns a copy of <code>self</code> which is guaranteed not to have a mapping with the given <em>value</em>.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"V"}],"args_string":"(value : V) : BidiMap(K, V)","args_html":"(value : V) : <a href=\"../Pf/BidiMap.html\">BidiMap</a>(K, V)","location":{"filename":"src/permafrost/bidi_map.cr","line_number":164,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/bidi_map.cr#L164"},"def":{"name":"dissoc_by_value","args":[{"name":"value","external_name":"value","restriction":"V"}],"return_type":"BidiMap(K, V)","visibility":"Public","body":"if key = key_for?(value)\nelse\n  return self\nend\nBidiMap.new(@valueof.dissoc(key), @keyof.dissoc(value))\n"}},{"html_id":"each(&:Tuple(K,V)->):Nil-instance-method","name":"each","doc":"Yields each key-value pair to the block.","summary":"<p>Yields each key-value pair to the block.</p>","abstract":false,"location":{"filename":"src/permafrost/bidi_map.cr","line_number":42,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/bidi_map.cr#L42"},"def":{"name":"each","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(::Tuple(K, V) ->)"},"return_type":"Nil","visibility":"Public","body":"@valueof.each do |k, v|\n  yield({k, v})\nend"}},{"html_id":"empty?:Bool-instance-method","name":"empty?","doc":"Returns `true` if this map contains no mappings.","summary":"<p>Returns <code>true</code> if this map contains no mappings.</p>","abstract":false,"location":{"filename":"src/permafrost/bidi_map.cr","line_number":32,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/bidi_map.cr#L32"},"def":{"name":"empty?","return_type":"Bool","visibility":"Public","body":"@valueof.empty?"}},{"html_id":"has_key_for?(value):Bool-instance-method","name":"has_key_for?","doc":"Returns `true` if this map contains a mapping with the given *value*.\n\n```\nbidi = Pf::BidiMap.assoc(:foo, 100).assoc(:bar, 200)\nbidi.has_key_for?(100) # => true\nbidi.has_key_for?(200) # => true\nbidi.has_key_for?(300) # => false\n```","summary":"<p>Returns <code>true</code> if this map contains a mapping with the given <em>value</em>.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value) : Bool","args_html":"(value) : Bool","location":{"filename":"src/permafrost/bidi_map.cr","line_number":106,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/bidi_map.cr#L106"},"def":{"name":"has_key_for?","args":[{"name":"value","external_name":"value","restriction":""}],"return_type":"Bool","visibility":"Public","body":"@keyof.includes?(value)"}},{"html_id":"has_value_for?(key):Bool-instance-method","name":"has_value_for?","doc":"Returns `true` if this map contains a mapping with the given *key*.\n\n```\nbidi = Pf::BidiMap.assoc(:foo, 100).assoc(:bar, 200)\nbidi.has_value_for?(:foo) # => true\nbidi.has_value_for?(:bar) # => true\nbidi.has_value_for?(:baz) # => false\n```","summary":"<p>Returns <code>true</code> if this map contains a mapping with the given <em>key</em>.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""}],"args_string":"(key) : Bool","args_html":"(key) : Bool","location":{"filename":"src/permafrost/bidi_map.cr","line_number":118,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/bidi_map.cr#L118"},"def":{"name":"has_value_for?","args":[{"name":"key","external_name":"key","restriction":""}],"return_type":"Bool","visibility":"Public","body":"@valueof.includes?(key)"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`.","summary":"<p>See <code>Object#hash(hasher)</code>.</p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","location":{"filename":"src/permafrost/bidi_map.cr","line_number":193,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/bidi_map.cr#L193"},"def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"result = hasher.result\ncopy = hasher\ncopy = self.class.hash(copy)\nresult = result &+ copy.result\ncopy = hasher\ncopy = @valueof.hash(copy)\nresult = result &+ copy.result\ncopy = hasher\ncopy = @keyof.hash(copy)\nresult = result &+ copy.result\nresult.hash(hasher)\n"}},{"html_id":"inspect(io)-instance-method","name":"inspect","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/permafrost/bidi_map.cr","line_number":211,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/bidi_map.cr#L211"},"def":{"name":"inspect","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"to_s(io)"}},{"html_id":"key_for(value:V):K|Nil-instance-method","name":"key_for","doc":"Returns the key mapped to the given *value*. If there is no such\nkey raises `KeyError`.\n\n```\nbidi = Pf::BidiMap.assoc(:foo, 100).assoc(:bar, 200)\nbidi.key_for(100) # => :foo\nbidi.key_for(200) # => :bar\nbidi.key_for(300) # raises KeyError\n```","summary":"<p>Returns the key mapped to the given <em>value</em>.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"V"}],"args_string":"(value : V) : K | Nil","args_html":"(value : V) : K | Nil","location":{"filename":"src/permafrost/bidi_map.cr","line_number":68,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/bidi_map.cr#L68"},"def":{"name":"key_for","args":[{"name":"value","external_name":"value","restriction":"V"}],"return_type":"K | ::Nil","visibility":"Public","body":"(key_for?(value)) || (raise(KeyError.new(\"Missing bidirectional map key for value: #{value}\")))"}},{"html_id":"key_for?(value:V):K|Nil-instance-method","name":"key_for?","doc":"Returns the key mapped to the given *value*, or nil if there is\nno such key.\n\n```\nbidi = Pf::BidiMap.assoc(:foo, 100).assoc(:bar, 200)\nbidi.key_for?(100) # => :foo\nbidi.key_for?(200) # => :bar\nbidi.key_for?(300) # => nil\n```","summary":"<p>Returns the key mapped to the given <em>value</em>, or nil if there is no such key.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"V"}],"args_string":"(value : V) : K | Nil","args_html":"(value : V) : K | Nil","location":{"filename":"src/permafrost/bidi_map.cr","line_number":55,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/bidi_map.cr#L55"},"def":{"name":"key_for?","args":[{"name":"value","external_name":"value","restriction":"V"}],"return_type":"K | ::Nil","visibility":"Public","body":"@keyof[value]?"}},{"html_id":"pretty_print(pp):Nil-instance-method","name":"pretty_print","abstract":false,"args":[{"name":"pp","external_name":"pp","restriction":""}],"args_string":"(pp) : Nil","args_html":"(pp) : Nil","location":{"filename":"src/permafrost/bidi_map.cr","line_number":225,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/bidi_map.cr#L225"},"def":{"name":"pretty_print","args":[{"name":"pp","external_name":"pp","restriction":""}],"return_type":"Nil","visibility":"Public","body":"pp.list(\"Pf::BidiMap{\", self, \"}\") do |k, v|\n  pp.group do\n    k.pretty_print(pp)\n    pp.text(\" <=>\")\n    pp.nest do\n      pp.breakable\n      v.pretty_print(pp)\n    end\n  end\nend"}},{"html_id":"same?(other:BidiMap(K,V)):Bool-instance-method","name":"same?","doc":"Returns `true` if `self` and *other* refer to the same map in memory.\n\nDue to the way `BidiMap` is implemented, this method can be used\nas a cheap way to detect changes.\n\n```\nbidi1 = Pf::BidiMap.assoc(:foo, 100).assoc(:bar, 200)\nbidi2 = bidi1.assoc(:foo, 100)\nbidi1.same?(bidi2) # => true\n```","summary":"<p>Returns <code>true</code> if <code>self</code> and <em>other</em> refer to the same map in memory.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"BidiMap(K, V)"}],"args_string":"(other : BidiMap(K, V)) : Bool","args_html":"(other : <a href=\"../Pf/BidiMap.html\">BidiMap</a>(K, V)) : Bool","location":{"filename":"src/permafrost/bidi_map.cr","line_number":180,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/bidi_map.cr#L180"},"def":{"name":"same?","args":[{"name":"other","external_name":"other","restriction":"BidiMap(K, V)"}],"return_type":"Bool","visibility":"Public","body":"(@valueof.same?(other.@valueof)) && (@keyof.same?(other.@keyof))"}},{"html_id":"size:Int32-instance-method","name":"size","doc":"Returns the number of mappings.","summary":"<p>Returns the number of mappings.</p>","abstract":false,"location":{"filename":"src/permafrost/bidi_map.cr","line_number":37,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/bidi_map.cr#L37"},"def":{"name":"size","return_type":"Int32","visibility":"Public","body":"@valueof.size"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/permafrost/bidi_map.cr","line_number":215,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/bidi_map.cr#L215"},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"Pf::BidiMap{\"\njoin(io, \", \") do |__temp_51|\n  k, v = __temp_51\n  k.inspect(io)\n  io << \" <=> \"\n  v.inspect(io)\nend\nio << \"}\"\n"}},{"html_id":"value_for(key:K):V|Nil-instance-method","name":"value_for","doc":"Returns the value mapped to the given *key*. If there is no such\nvalue raises `KeyError`.\n\n```\nbidi = Pf::BidiMap.assoc(:foo, 100).assoc(:bar, 200)\nbidi.value_for(:foo) # => 100\nbidi.value_for(:bar) # => 200\nbidi.value_for(:baz) # raises KeyError\n```","summary":"<p>Returns the value mapped to the given <em>key</em>.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"K"}],"args_string":"(key : K) : V | Nil","args_html":"(key : K) : V | Nil","location":{"filename":"src/permafrost/bidi_map.cr","line_number":94,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/bidi_map.cr#L94"},"def":{"name":"value_for","args":[{"name":"key","external_name":"key","restriction":"K"}],"return_type":"V | ::Nil","visibility":"Public","body":"(value_for?(key)) || (raise(KeyError.new(\"Missing bidirectional map value for key: #{key.inspect}\")))"}},{"html_id":"value_for?(key:K):V|Nil-instance-method","name":"value_for?","doc":"Returns the value mapped to the given *key*, or nil if there is\nno such value.\n\n```\nbidi = Pf::BidiMap.assoc(:foo, 100).assoc(:bar, 200)\nbidi.value_for?(:foo) # => 100\nbidi.value_for?(:bar) # => 200\nbidi.value_for?(:baz) # => nil\n```","summary":"<p>Returns the value mapped to the given <em>key</em>, or nil if there is no such value.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"K"}],"args_string":"(key : K) : V | Nil","args_html":"(key : K) : V | Nil","location":{"filename":"src/permafrost/bidi_map.cr","line_number":81,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/bidi_map.cr#L81"},"def":{"name":"value_for?","args":[{"name":"key","external_name":"key","restriction":"K"}],"return_type":"V | ::Nil","visibility":"Public","body":"@valueof[key]?"}}]},{"html_id":"permafrost/Pf/Eq","path":"Pf/Eq.html","kind":"module","full_name":"Pf::Eq","name":"Eq","abstract":false,"locations":[{"filename":"src/permafrost/map.cr","line_number":5,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L5"}],"repository_name":"permafrost","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"permafrost/Pf","kind":"module","full_name":"Pf","name":"Pf"},"doc":"Includers are `Pf::Map` value types whose `#==` method can be used\nto determine whether two values are equal after reassignment. This\nhelps to avoid path copying if the values do indeed turn out equal.","summary":"<p>Includers are <code><a href=\"../Pf/Map.html\">Pf::Map</a></code> value types whose <code>#==</code> method can be used to determine whether two values are equal after reassignment.</p>"},{"html_id":"permafrost/Pf/Map","path":"Pf/Map.html","kind":"struct","full_name":"Pf::Map(K, V)","name":"Map","abstract":false,"superclass":{"html_id":"permafrost/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"permafrost/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"permafrost/Pf/Core","kind":"module","full_name":"Pf::Core","name":"Core"},{"html_id":"permafrost/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"permafrost/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"permafrost/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/permafrost/map.cr","line_number":54,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L54"}],"repository_name":"permafrost","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"permafrost/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"permafrost/Pf/Core","kind":"module","full_name":"Pf::Core","name":"Core"}],"namespace":{"html_id":"permafrost/Pf","kind":"module","full_name":"Pf","name":"Pf"},"doc":"A thread-safe, persistent, unordered hash map.\n\n## Value equality\n\nBeing a persistent map, `Pf::Map` tries to avoid path copying. This\nis done by comparing the old and new values using `==`. In particular,\nmethods that *support value equality* do so.\n\nNote that, out of the box, `==` is called only when your value is\nof the types `nil`, `Bool`, `Char`, `String`, `Symbol`, or of a\nprimitive number type.\n\n`same?` is called on all reference (`Reference`) types.\n\n```\nmap = Pf::Map[foo: 100, bar: 200]\nmap.assoc(\"foo\", 100).same?(map)             # => true, no change\nmap.update(\"foo\", 0, &.succ.pred).same?(map) # => true, no change\n\nmap2 = Pf::Map[foo: 100, bar: 200]\nmap.merge(map2).same?(map)  # => true, no change\nmap2.merge(map).same?(map2) # => true, no change\n```\n\nIf you want to enable `==` for our own object, you should include\n`Pf::Eq`.\n\n```\nrecord Info, first_name : String, last_name : String\n\npeople = Pf::Map\n  .assoc(0, Info.new(\"John\", \"Doe\"))\n  .assoc(1, Info.new(\"Barbara\", \"Doe\"))\n\npeople.assoc(0, Info.new(\"John\", \"Doe\")).same?(people) # => false\n\nstruct Info\n  include Pf::Eq\nend\n\npeople.assoc(0, Info.new(\"John\", \"Doe\")).same?(people) # => true\n```\n\nSince `BidiMap` is backed by `Map`, the same applies to it. On the\nother hand, elements of a `Set` are *keys* so they are always compared\nusing `==` eventually.","summary":"<p>A thread-safe, persistent, unordered hash map.</p>","class_methods":[{"html_id":"[](**entries)-class-method","name":"[]","doc":"A shorthand syntax for creating a `Map` with string keys. The type\nof the map's values is the union of the types of values in *entries*.\n\n```\nmap = Pf::Map[name: \"John Doe\", age: 25]\nmap[\"name\"] # => \"John Doe\"\nmap[\"age\"]  # => 25\n\ntypeof(map) # => Pf::Map(String, String | Int32)\n```","summary":"<p>A shorthand syntax for creating a <code><a href=\"../Pf/Map.html\">Map</a></code> with string keys.</p>","abstract":false,"location":{"filename":"src/permafrost/map.cr","line_number":270,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L270"},"def":{"name":"[]","double_splat":{"name":"entries","external_name":"entries","restriction":""},"visibility":"Public","body":"Map(String, typeof(Enumerable.element_type(entries.values))).transaction do |commit|\n  entries.each do |k, v|\n    commit.assoc(k.to_s, v)\n  end\nend"}},{"html_id":"assoc(key:K,value:V):Map(K,V)-class-method","name":"assoc","doc":"A shorthand for `new.assoc`.","summary":"<p>A shorthand for <code>new.assoc</code>.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"K"},{"name":"value","external_name":"value","restriction":"V"}],"args_string":"(key : K, value : V) : Map(K, V)","args_html":"(key : K, value : V) : <a href=\"../Pf/Map.html\">Map</a>(K, V)","location":{"filename":"src/permafrost/map.cr","line_number":251,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L251"},"def":{"name":"assoc","args":[{"name":"key","external_name":"key","restriction":"K"},{"name":"value","external_name":"value","restriction":"V"}],"return_type":"Map(K, V)","visibility":"Public","body":"Map(K, V).new.assoc(key, value)"}},{"html_id":"eqv?(v1:V,v2:V):BoolforallV-class-method","name":"eqv?","doc":"Returns `true` if two mapping values *v1* and *v2* are equal, taking\n`Pf::Eq` into account.","summary":"<p>Returns <code>true</code> if two mapping values <em>v1</em> and <em>v2</em> are equal, taking <code><a href=\"../Pf/Eq.html\">Pf::Eq</a></code> into account.</p>","abstract":false,"args":[{"name":"v1","external_name":"v1","restriction":"V"},{"name":"v2","external_name":"v2","restriction":"V"}],"args_string":"(v1 : V, v2 : V) : Bool forall V","args_html":"(v1 : V, v2 : V) : Bool forall V","location":{"filename":"src/permafrost/map.cr","line_number":60,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L60"},"def":{"name":"eqv?","args":[{"name":"v1","external_name":"v1","restriction":"V"},{"name":"v2","external_name":"v2","restriction":"V"}],"return_type":"Bool","visibility":"Public","body":"{% if (((((V < ::Pf::Eq || (V == ::Nil)) || (V == ::Bool)) || (V == ::Char)) || (V == ::String)) || (V == ::Symbol)) || V < ::Number::Primitive %}\n        v1 == v2\n      {% else %}{% if V < ::Reference %}\n        v1.same?(v2)\n      {% else %}\n        false\n      {% end %}{% end %}"}},{"html_id":"transaction(&:Commit(K,V)->):Map(K,V)-class-method","name":"transaction","doc":"Shorthand for `new.transaction`.","summary":"<p>Shorthand for <code>new.transaction</code>.</p>","abstract":false,"location":{"filename":"src/permafrost/map.cr","line_number":277,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L277"},"def":{"name":"transaction","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Commit(K, V) ->)"},"return_type":"Map(K, V)","visibility":"Public","body":"new.transaction do |commit|\n  yield commit\nend"}}],"constructors":[{"html_id":"new(enumerable:Enumerable(Tuple(K,V)))-class-method","name":"new","doc":"Constructs a `Map` from an *enumerable* of key-value pairs.","summary":"<p>Constructs a <code><a href=\"../Pf/Map.html\">Map</a></code> from an <em>enumerable</em> of key-value pairs.</p>","abstract":false,"args":[{"name":"enumerable","external_name":"enumerable","restriction":"Enumerable(::Tuple(K, V))"}],"args_string":"(enumerable : Enumerable(Tuple(K, V)))","args_html":"(enumerable : <a href=\"../Enumerable.html\">Enumerable</a>(Tuple(K, V)))","location":{"filename":"src/permafrost/map.cr","line_number":246,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L246"},"def":{"name":"new","args":[{"name":"enumerable","external_name":"enumerable","restriction":"Enumerable(::Tuple(K, V))"}],"visibility":"Public","body":"Map(K, V).new.concat(enumerable)"}},{"html_id":"new:Map(K,V)-class-method","name":"new","doc":"Constructs an empty `Map`.","summary":"<p>Constructs an empty <code><a href=\"../Pf/Map.html\">Map</a></code>.</p>","abstract":false,"location":{"filename":"src/permafrost/map.cr","line_number":241,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L241"},"def":{"name":"new","return_type":"Map(K, V)","visibility":"Public","body":"new(Node(Entry(K, V)).new)"}}],"instance_methods":[{"html_id":"==(other:Map):Bool-instance-method","name":"==","doc":"Compares `self` with *other*. Returns `true` if all associations are\nthe same (values are compared using `==`).","summary":"<p>Compares <code>self</code> with <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Map"}],"args_string":"(other : Map) : Bool","args_html":"(other : <a href=\"../Pf/Map.html\">Map</a>) : Bool","location":{"filename":"src/permafrost/map.cr","line_number":851,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L851"},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"Map"}],"return_type":"Bool","visibility":"Public","body":"if same?(other)\n  return true\nend\nif size == other.size\nelse\n  return false\nend\neach do |k, v1|\n  v2 = other.fetch(k) do\n    return false\n  end\n  if v1 == v2\n  else\n    return false\n  end\nend\ntrue\n"}},{"html_id":"[](key:K):V-instance-method","name":"[]","doc":"Returns the value associated with *key*. Raises `KeyError` if there is\nno such value.\n\n```\nmap = Pf::Map[foo: 10]\nmap[\"foo\"] # => 10\nmap[\"bar\"] # raises KeyError\n```","summary":"<p>Returns the value associated with <em>key</em>.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"K"}],"args_string":"(key : K) : V","args_html":"(key : K) : V","location":{"filename":"src/permafrost/map.cr","line_number":471,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L471"},"def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"K"}],"return_type":"V","visibility":"Public","body":"self[key]? || (raise(KeyError.new(\"Missing map key: #{key.inspect}\")))"}},{"html_id":"[](key:K,*subkeys)-instance-method","name":"[]","doc":"Traverses nested maps/`Hash`es and returns the value. Raises\n`KeyError` if there is no value.\n\n```\nmap = Pf::Map[foo: Pf::Map[bar: {100 => Pf::Map[baz: \"Yay!\"]}]]\nmap[\"foo\", \"bar\", 100, \"baz\"] # => \"Yay!\"\nmap[\"foo\", \"bar\", 200]        # raises KeyError\n```","summary":"<p>Traverses nested maps/<code>Hash</code>es and returns the value.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"K"},{"name":"subkeys","external_name":"subkeys","restriction":""}],"args_string":"(key : K, *subkeys)","args_html":"(key : K, *subkeys)","location":{"filename":"src/permafrost/map.cr","line_number":483,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L483"},"def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"K"},{"name":"subkeys","external_name":"subkeys","restriction":""}],"splat_index":1,"visibility":"Public","body":"dig(key, *subkeys)"}},{"html_id":"[]?(key:K):V|Nil-instance-method","name":"[]?","doc":"Returns the value associated with *key*, or nil if *key* is absent.\n\n```\nmap = Pf::Map[foo: 10, bar: 20]\nmap[\"foo\"]? # => 10\nmap[\"bar\"]? # => 20\nmap[\"baz\"]? # => nil\n```","summary":"<p>Returns the value associated with <em>key</em>, or nil if <em>key</em> is absent.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"K"}],"args_string":"(key : K) : V | Nil","args_html":"(key : K) : V | Nil","location":{"filename":"src/permafrost/map.cr","line_number":434,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L434"},"def":{"name":"[]?","args":[{"name":"key","external_name":"key","restriction":"K"}],"return_type":"V | ::Nil","visibility":"Public","body":"fetch(key) do\n  return\nend"}},{"html_id":"[]?(key:K,*subkeys)-instance-method","name":"[]?","doc":"Traverses nested maps/`Hash`es and returns the value, or `nil` if\nthe value is absent.\n\n```\nmap = Pf::Map[foo: Pf::Map[bar: {100 => Pf::Map[baz: \"Yay!\"]}]]\nmap[\"foo\", \"bar\", 100, \"baz\"]? # => \"Yay!\"\nmap[\"foo\", \"bar\", 200]?        # => nil\n```","summary":"<p>Traverses nested maps/<code>Hash</code>es and returns the value, or <code>nil</code> if the value is absent.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"K"},{"name":"subkeys","external_name":"subkeys","restriction":""}],"args_string":"(key : K, *subkeys)","args_html":"(key : K, *subkeys)","location":{"filename":"src/permafrost/map.cr","line_number":446,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L446"},"def":{"name":"[]?","args":[{"name":"key","external_name":"key","restriction":"K"},{"name":"subkeys","external_name":"subkeys","restriction":""}],"splat_index":1,"visibility":"Public","body":"dig?(key, *subkeys)"}},{"html_id":"assoc(key:K,value:V):Map(K,V)-instance-method","name":"assoc","doc":"Returns a copy of `self` that contains the association between *key* and *value*.\n\n*Supports value equality.*\n\n```\nmap = Pf::Map(String, Int32).new\n\nbranch1 = map.assoc(\"foo\", 100)\nbranch2 = map.assoc(\"foo\", 200)\n\nmap = map.assoc(\"bar\", 300)\n\nmap[\"foo\"]? # => nil\nmap[\"bar\"]? # => 300\n\nbranch1[\"foo\"]? # => 100\nbranch1[\"bar\"]? # => nil\n\nbranch2[\"foo\"]? # => 200\nbranch2[\"bar\"]? # => nil\n```","summary":"<p>Returns a copy of <code>self</code> that contains the association between <em>key</em> and <em>value</em>.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"K"},{"name":"value","external_name":"value","restriction":"V"}],"args_string":"(key : K, value : V) : Map(K, V)","args_html":"(key : K, value : V) : <a href=\"../Pf/Map.html\">Map</a>(K, V)","location":{"filename":"src/permafrost/map.cr","line_number":522,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L522"},"def":{"name":"assoc","args":[{"name":"key","external_name":"key","restriction":"K"},{"name":"value","external_name":"value","restriction":"V"}],"return_type":"Map(K, V)","visibility":"Public","body":"added, node = @node.add(Probes::AssocImm(K, V).new(key, value))\nMap.new(node, added ? @size + 1 : @size)\n"}},{"html_id":"clone:Map(K,V)-instance-method","name":"clone","doc":"Returns a new `Map` whose values are deeply cloned versions of\nthose from `self`. That is, returns a deep copy of `self`.\n\nKeys are not cloned (if you need to clone keys then the last thing\nto help you is a persistent immutable map!).\n\n```\nmap = Pf::Map[foo: [1, 2, 3], bar: [4, 5, 6]]\nmap2 = map.clone\n\nmap[\"foo\"][0] = 100\n\nmap  # => Pf::Map{\"foo\" => [100, 2, 3], \"bar\" => [4, 5, 6]}\nmap2 # => Pf::Map{\"foo\" => [1, 2, 3], \"bar\" => [4, 5, 6]}\n```","summary":"<p>Returns a new <code><a href=\"../Pf/Map.html\">Map</a></code> whose values are deeply cloned versions of those from <code>self</code>.</p>","abstract":false,"location":{"filename":"src/permafrost/map.cr","line_number":836,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L836"},"def":{"name":"clone","return_type":"Map(K, V)","visibility":"Public","body":"{% if (((((V == ::Nil) || (V == ::Bool)) || (V == ::Char)) || (V == ::String)) || (V == ::Symbol)) || V < ::Number::Primitive %}\n        return self\n      {% end %}\ntransaction do |commit|\n  each do |k, v|\n    commit.assoc(k.clone, v.clone)\n  end\nend\n"}},{"html_id":"compact-instance-method","name":"compact","doc":"Returns a copy of `self` without `nil` values.\n\n```\nmap = Pf::Map[foo: nil, bar: 123]\nmap.compact # => Pf::Map{\"bar\" => 123}\n\ntypeof(map)         # => Pf::Map(String, Int32?)\ntypeof(map.compact) # => Pf::Map(String, Int32)\n```","summary":"<p>Returns a copy of <code>self</code> without <code>nil</code> values.</p>","abstract":false,"location":{"filename":"src/permafrost/map.cr","line_number":732,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L732"},"def":{"name":"compact","visibility":"Public","body":"Map(K, typeof((Enumerable.element_type(self))[1].not_nil!)).transaction do |commit|\n  each do |key, value|\n    if value\n    else\n      next\n    end\n    commit.assoc(key, value)\n  end\nend"}},{"html_id":"concat(other:Enumerable(Tuple(K,V))):Map(K,V)-instance-method","name":"concat","doc":"Returns a new map with associations from `self` and *other* combined, where\n*other* is an enumerable of key-value pairs.\n\n*Supports value equality.*\n\n```\nmap = Pf::Map[foo: 100, bar: 200, baz: 300]\nmap.concat([{\"x\", 123}, {\"y\", 456}]) # => Pf::Map[foo: 100, bar: 200, baz: 300, x: 123, y: 456]\n```","summary":"<p>Returns a new map with associations from <code>self</code> and <em>other</em> combined, where <em>other</em> is an enumerable of key-value pairs.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Enumerable(::Tuple(K, V))"}],"args_string":"(other : Enumerable(Tuple(K, V))) : Map(K, V)","args_html":"(other : <a href=\"../Enumerable.html\">Enumerable</a>(Tuple(K, V))) : <a href=\"../Pf/Map.html\">Map</a>(K, V)","location":{"filename":"src/permafrost/map.cr","line_number":650,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L650"},"def":{"name":"concat","args":[{"name":"other","external_name":"other","restriction":"Enumerable(::Tuple(K, V))"}],"return_type":"Map(K, V)","visibility":"Public","body":"transaction do |commit|\n  other.each do |k2, v2|\n    commit.assoc(k2, v2)\n  end\nend"}},{"html_id":"dissoc(key:K):Map(K,V)-instance-method","name":"dissoc","doc":"Returns a copy of `self` that is guaranteed not to contain an association\nwith the given *key*.\n\n```\nmap = Pf::Map[foo: 100, bar: 200]\n\nbranch1 = map.dissoc(\"foo\")\nbranch2 = map.dissoc(\"bar\")\n\nmap[\"foo\"]? # => 100\nmap[\"bar\"]? # => 200\n\nbranch1[\"foo\"]? # => nil\nbranch1[\"bar\"]? # => 200\n\nbranch2[\"foo\"]? # => 100\nbranch2[\"bar\"]? # => nil\n```","summary":"<p>Returns a copy of <code>self</code> that is guaranteed not to contain an association with the given <em>key</em>.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"K"}],"args_string":"(key : K) : Map(K, V)","args_html":"(key : K) : <a href=\"../Pf/Map.html\">Map</a>(K, V)","location":{"filename":"src/permafrost/map.cr","line_number":570,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L570"},"def":{"name":"dissoc","args":[{"name":"key","external_name":"key","restriction":"K"}],"return_type":"Map(K, V)","visibility":"Public","body":"removed, node = @node.delete(Probes::DissocImm(K, V).new(key))\nMap.new(node, removed ? @size - 1 : @size)\n"}},{"html_id":"each(&:Tuple(K,V)->):Nil-instance-method","name":"each","doc":"Yields each key-value pair to the block.","summary":"<p>Yields each key-value pair to the block.</p>","abstract":false,"location":{"filename":"src/permafrost/map.cr","line_number":326,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L326"},"def":{"name":"each","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(::Tuple(K, V) ->)"},"return_type":"Nil","visibility":"Public","body":"@node.each do |entry|\n  yield({entry.k, entry.v})\nend"}},{"html_id":"each_key(&:K->):Nil-instance-method","name":"each_key","doc":"Yields each key to the block.","summary":"<p>Yields each key to the block.</p>","abstract":false,"location":{"filename":"src/permafrost/map.cr","line_number":331,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L331"},"def":{"name":"each_key","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(K ->)"},"return_type":"Nil","visibility":"Public","body":"each do |k, _|\n  yield k\nend"}},{"html_id":"each_value(&:V->):Nil-instance-method","name":"each_value","doc":"Yields each value to the block.","summary":"<p>Yields each value to the block.</p>","abstract":false,"location":{"filename":"src/permafrost/map.cr","line_number":336,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L336"},"def":{"name":"each_value","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(V ->)"},"return_type":"Nil","visibility":"Public","body":"each do |_, v|\n  yield v\nend"}},{"html_id":"empty?:Bool-instance-method","name":"empty?","doc":"Returns `true` if this map contains no mappings.","summary":"<p>Returns <code>true</code> if this map contains no mappings.</p>","abstract":false,"location":{"filename":"src/permafrost/map.cr","line_number":321,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L321"},"def":{"name":"empty?","return_type":"Bool","visibility":"Public","body":"size.zero?"}},{"html_id":"fetch(key:K,&:->{K,V}):V|{K,V}forallT-instance-method","name":"fetch","doc":"Returns the value mapped to *key*, or yields if *key* is absent.\nThis method mainly exists to circumvent nil as in value vs. nil\nas in absence issue.","summary":"<p>Returns the value mapped to <em>key</em>, or yields if <em>key</em> is absent.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"K"}],"args_string":"(key : K, & :  -> {K, V}) : V | {K, V} forall T","args_html":"(key : K, & :  -> {K, V}) : V | {K, V} forall T","location":{"filename":"src/permafrost/map.cr","line_number":395,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L395"},"def":{"name":"fetch","args":[{"name":"key","external_name":"key","restriction":"K"}],"yields":0,"block_arity":0,"block_arg":{"name":"","external_name":"","restriction":"(-> T)"},"return_type":"V | T","visibility":"Public","body":"if value_t = fetch?(key)\nelse\n  return yield\nend\nvalue, *_ = value_t\nvalue\n"}},{"html_id":"fetch?(key:K):Tuple(V)|Nil-instance-method","name":"fetch?","doc":"Returns the value associated with *key*, or `nil` if the value is absent.\nThe value is wrapped in a tuple to differentiate between `nil` as value\nand `nil` as absence.\n\n```\nmap = Pf::Map[name: \"John Doe\", job: nil]\nmap.fetch?(\"job\")  # => {nil}\nmap.fetch?(\"name\") # => {\"John Doe\"}\nmap.fetch?(\"age\")  # => nil\n\nif name_t = map.fetch?(\"name\")\n  name, *_ = name_t\n  name # => \"John Doe\"\nend\n```","summary":"<p>Returns the value associated with <em>key</em>, or <code>nil</code> if the value is absent.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"K"}],"args_string":"(key : K) : Tuple(V) | Nil","args_html":"(key : K) : Tuple(V) | Nil","location":{"filename":"src/permafrost/map.cr","line_number":385,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L385"},"def":{"name":"fetch?","args":[{"name":"key","external_name":"key","restriction":"K"}],"return_type":"::Tuple(V) | ::Nil","visibility":"Public","body":"if entry_t = @node.fetch?(Probes::Fetch(K, V).new(key))\nelse\n  return\nend\nentry, *_ = entry_t\n{entry.v}\n"}},{"html_id":"fmap(&:Tuple(K,V)->Tuple(K2,V2)):Map(K2,V2)forallK2,V2-instance-method","name":"fmap","doc":"Same as `map`, but returns `Map` instead of an array.\n\nIf the block returns more than one value for the same key, the last\nyielded value is preferred.\n\nSupports value equality if `K == K2` and `V == V2`.\n\n```\nmap = Pf::Map[foo: \"John Doe\", bar: \"Samantha Doe\"]\nmap.fmap { |k, v| {k.upcase, v.upcase} } # => Pf::Map{\"FOO\" => \"JOHN DOE\", \"BAR\" => \"SAMANTHA DOE\"}\n```","summary":"<p>Same as <code>map</code>, but returns <code><a href=\"../Pf/Map.html\">Map</a></code> instead of an array.</p>","abstract":false,"location":{"filename":"src/permafrost/map.cr","line_number":752,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L752"},"def":{"name":"fmap","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(::Tuple(K, V) -> ::Tuple(K2, V2))"},"return_type":"Map(K2, V2)","visibility":"Public","body":"{% if (K == K2) && (V == V2) %}\n        same = true\n        map = Map(K, V).transaction do |commit|\n          each do |key, value|\n            newkey, newvalue = yield({key, value})\n            commit.assoc(newkey, newvalue)\n            next unless same\n            unless oldvalue_t = fetch?(newkey)\n              same = false\n              next\n            end\n            oldvalue, *_ = oldvalue_t\n            same = Map.eqv?(oldvalue, newvalue)\n          end\n        end\n        same ? self : map\n      {% else %}\n        to_pf_map { |k, v| yield({k, v}) }\n      {% end %}"}},{"html_id":"has_key?(key):Bool-instance-method","name":"has_key?","doc":"Alias of `includes?`.","summary":"<p>Alias of <code><a href=\"../Pf/Map.html#includes%3F%28key%3AK%29%3ABool-instance-method\">#includes?</a></code>.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""}],"args_string":"(key) : Bool","args_html":"(key) : Bool","location":{"filename":"src/permafrost/map.cr","line_number":422,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L422"},"def":{"name":"has_key?","args":[{"name":"key","external_name":"key","restriction":""}],"return_type":"Bool","visibility":"Public","body":"includes?(key)"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","location":{"filename":"src/permafrost/map.cr","line_number":864,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L864"},"def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"result = hasher.result\ncopy = hasher\ncopy = self.class.hash(copy)\nresult = result &+ copy.result\neach do |k, v|\n  copy = hasher\n  copy = k.hash(copy)\n  copy = v.hash(copy)\n  result = result &+ copy.result\nend\nresult.hash(hasher)\n"}},{"html_id":"includes?(key:K):Bool-instance-method","name":"includes?","doc":"Returns `true` if *key* is present in this map.\n\n```\nmap = Pf::Map[foo: 100, bar: 200]\n\"foo\".in?(map) # => true\n\"bar\".in?(map) # => true\n\"baz\".in?(map) # => false\n```","summary":"<p>Returns <code>true</code> if <em>key</em> is present in this map.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"K"}],"args_string":"(key : K) : Bool","args_html":"(key : K) : Bool","location":{"filename":"src/permafrost/map.cr","line_number":410,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L410"},"def":{"name":"includes?","args":[{"name":"key","external_name":"key","restriction":"K"}],"return_type":"Bool","visibility":"Public","body":"fetch(key) do\n  return false\nend\ntrue\n"}},{"html_id":"inspect(io)-instance-method","name":"inspect","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/permafrost/map.cr","line_number":883,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L883"},"def":{"name":"inspect","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"to_s(io)"}},{"html_id":"keys:Array(K)-instance-method","name":"keys","doc":"Returns an array with all keys from this map. There is no\nguaranteed order of keys.\n\n```\nmap = Pf::Map[foo: 10, bar: 20]\nmap.keys # => [\"foo\", \"bar\"]\n```","summary":"<p>Returns an array with all keys from this map.</p>","abstract":false,"location":{"filename":"src/permafrost/map.cr","line_number":347,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L347"},"def":{"name":"keys","return_type":"Array(K)","visibility":"Public","body":"keys = Array(K).new(size)\neach_key do |key|\n  keys << key\nend\nkeys\n"}},{"html_id":"map_key(&:K->K2):Map(K2,V)forallK2-instance-method","name":"map_key","doc":"Transforms keys: same as `fmap`, but only yields keys from this map.\n\nSupports value equality if `K == K2`.\n\n```\nmap = Pf::Map[foo: \"John Doe\", bar: \"Samantha Doe\"]\nmap.map_key(&.upcase) # => Pf::Map{\"FOO\" => \"John Doe\", \"BAR\" => \"Samantha Doe\"}\n```","summary":"<p>Transforms keys: same as <code><a href=\"../Pf/Map.html#fmap%28%26%3ATuple%28K%2CV%29-%3ETuple%28K2%2CV2%29%29%3AMap%28K2%2CV2%29forallK2%2CV2-instance-method\">#fmap</a></code>, but only yields keys from this map.</p>","abstract":false,"location":{"filename":"src/permafrost/map.cr","line_number":782,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L782"},"def":{"name":"map_key","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(K -> K2)"},"return_type":"Map(K2, V)","visibility":"Public","body":"fmap do |k, v|\n  {(  yield k), v}\nend"}},{"html_id":"map_value(&:V->V2):Map(K,V2)forallV2-instance-method","name":"map_value","doc":"Transforms values: same as `fmap`, but only yields values from\nthis map.\n\nSupports value equality if `V == V2`.\n\n```\nmap = Pf::Map[foo: \"John Doe\", bar: \"Samantha Doe\"]\nmap.map_value(&.upcase) # => Pf::Map{\"foo\" => \"JOHN DOE\", \"bar\" => \"SAMANTHA DOE\"}\n```","summary":"<p>Transforms values: same as <code><a href=\"../Pf/Map.html#fmap%28%26%3ATuple%28K%2CV%29-%3ETuple%28K2%2CV2%29%29%3AMap%28K2%2CV2%29forallK2%2CV2-instance-method\">#fmap</a></code>, but only yields values from this map.</p>","abstract":false,"location":{"filename":"src/permafrost/map.cr","line_number":795,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L795"},"def":{"name":"map_value","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(V -> V2)"},"return_type":"Map(K, V2)","visibility":"Public","body":"fmap do |k, v|\n  {k, (  yield v)}\nend"}},{"html_id":"merge(other:Map(K2,V2)):Map(K|K2,V|V2)forallK2,V2-instance-method","name":"merge","doc":"Returns a new map with associations from `self` and *other* combined.\n\nIf some key is common both to `self` and *other*, *other*'s value\nis preferred.\n\nSupports value equality if `K == K2` and `V == V2`.\n\n```\na = Pf::Map[foo: 100, bar: 200]\nb = Pf::Map[foo: \"hello\", baz: true, boo: 500]\n\nmap = a.merge(b)\nmap # => Pf::Map{\"foo\" => \"hello\", \"bar\" => 200, \"baz\" => true, \"boo\" => 500}\n\ntypeof(map) # => Pf::Map(String, String | Int32 | Bool)\n```","summary":"<p>Returns a new map with associations from <code>self</code> and <em>other</em> combined.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Map(K2, V2)"}],"args_string":"(other : Map(K2, V2)) : Map(K | K2, V | V2) forall K2, V2","args_html":"(other : <a href=\"../Pf/Map.html\">Map</a>(K2, V2)) : <a href=\"../Pf/Map.html\">Map</a>(K | K2, V | V2) forall K2, V2","location":{"filename":"src/permafrost/map.cr","line_number":605,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L605"},"def":{"name":"merge","args":[{"name":"other","external_name":"other","restriction":"Map(K2, V2)"}],"return_type":"Map(K | K2, V | V2)","visibility":"Public","body":"Map(K | K2, V | V2).transaction do |commit|\n  self.each do |k, v1|\n    commit.assoc(k.as(K | K2), v1.as(V | V2))\n  end\n  other.each do |k, v2|\n    commit.assoc(k.as(K | K2), v2.as(V | V2))\n  end\nend"}},{"html_id":"merge(other:Map(K2,V2),&:K,V,V2->V|V2):Map(K|K2,V|V2)forallK2,V2-instance-method","name":"merge","doc":"Returns a new map with assocations from `self` and *other* combined.\n\nIf some key is common both to `self` and *other*, that key is\nyielded to the block together with the two values. The return\nvalue of the block is used as the final value.\n\n```\na = Pf::Map[foo: 100, bar: 200, baz: 300]\nb = Pf::Map[foo: 200, bar: 300.8, boo: 1000.5]\n\nmap = a.merge(b) { |k, v1, v2| v1 + v2 }\nmap # => Pf::Map{\"foo\" => 300, \"bar\" => 500.8, \"baz\" => 300, \"boo\" => 1000.5}\n\ntypeof(map) # => Pf::Map(String, Int32 | Float64)\n```","summary":"<p>Returns a new map with assocations from <code>self</code> and <em>other</em> combined.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Map(K2, V2)"}],"args_string":"(other : Map(K2, V2), & : K, V, V2 -> V | V2) : Map(K | K2, V | V2) forall K2, V2","args_html":"(other : <a href=\"../Pf/Map.html\">Map</a>(K2, V2), & : K, V, V2 -> V | V2) : <a href=\"../Pf/Map.html\">Map</a>(K | K2, V | V2) forall K2, V2","location":{"filename":"src/permafrost/map.cr","line_number":627,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L627"},"def":{"name":"merge","args":[{"name":"other","external_name":"other","restriction":"Map(K2, V2)"}],"yields":3,"block_arity":3,"block_arg":{"name":"","external_name":"","restriction":"(K, V, V2 -> V | V2)"},"return_type":"Map(K | K2, V | V2)","visibility":"Public","body":"Map(K | K2, V | V2).transaction do |commit|\n  self.each do |k, v1|\n    commit.assoc(k.as(K | K2), v1.as(V | V2))\n  end\n  other.each do |k, v2|\n    k = k.as(K | K2)\n    if v1 = commit[k]?\n      commit.assoc(k, (yield k.as(K), v1.as(V), v2.as(V2)).as(V | V2))\n    else\n      commit.assoc(k, v2.as(V | V2))\n    end\n  end\nend"}},{"html_id":"pretty_print(pp):Nil-instance-method","name":"pretty_print","abstract":false,"args":[{"name":"pp","external_name":"pp","restriction":""}],"args_string":"(pp) : Nil","args_html":"(pp) : Nil","location":{"filename":"src/permafrost/map.cr","line_number":897,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L897"},"def":{"name":"pretty_print","args":[{"name":"pp","external_name":"pp","restriction":""}],"return_type":"Nil","visibility":"Public","body":"pp.list(\"Pf::Map{\", self, \"}\") do |k, v|\n  pp.group do\n    k.pretty_print(pp)\n    pp.text(\" =>\")\n    pp.nest do\n      pp.breakable\n      v.pretty_print(pp)\n    end\n  end\nend"}},{"html_id":"reject(&:Tuple(K,V)->Bool):Map(K,V)-instance-method","name":"reject","doc":"Returns a copy of `self` which includes only associations for which\nthe block is *falsey*.\n\n*Supports value equality.*\n\n```\nmap = Pf::Map[foo: 2, bar: 3, baz: 4, boo: 5]\nmap.reject { |_, v| v.even? } # => Pf::Map{\"bar\" => 3, \"boo\" => 5}\n```","summary":"<p>Returns a copy of <code>self</code> which includes only associations for which the block is <em>falsey</em>.</p>","abstract":false,"location":{"filename":"src/permafrost/map.cr","line_number":701,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L701"},"def":{"name":"reject","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(::Tuple(K, V) -> Bool)"},"return_type":"Map(K, V)","visibility":"Public","body":"self.select do |k, v|\n  !(yield({k, v}))\nend"}},{"html_id":"reject(keys:Enumerable)-instance-method","name":"reject","doc":"Returns a new map which is guaranteed not to include the given *keys*.\n\n```\nmap = Pf::Map[foo: 2, bar: 3, baz: 4, boo: 5]\nmap.reject({\"foo\", \"boo\"}) # => Pf::Map{\"bar\" => 3, \"baz\" => 4}\nmap.reject(\"foo\", \"boo\")   # => Pf::Map{\"bar\" => 3, \"baz\" => 4}\n```","summary":"<p>Returns a new map which is guaranteed not to include the given <em>keys</em>.</p>","abstract":false,"args":[{"name":"keys","external_name":"keys","restriction":"Enumerable"}],"args_string":"(keys : Enumerable)","args_html":"(keys : <a href=\"../Enumerable.html\">Enumerable</a>)","location":{"filename":"src/permafrost/map.cr","line_number":712,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L712"},"def":{"name":"reject","args":[{"name":"keys","external_name":"keys","restriction":"Enumerable"}],"visibility":"Public","body":"transaction do |commit|\n  keys.each do |key|\n    commit.dissoc(key)\n  end\nend"}},{"html_id":"reject(*keys)-instance-method","name":"reject","doc":"Returns a new map which is guaranteed not to include the given *keys*.\n\n```\nmap = Pf::Map[foo: 2, bar: 3, baz: 4, boo: 5]\nmap.reject({\"foo\", \"boo\"}) # => Pf::Map{\"bar\" => 3, \"baz\" => 4}\nmap.reject(\"foo\", \"boo\")   # => Pf::Map{\"bar\" => 3, \"baz\" => 4}\n```","summary":"<p>Returns a new map which is guaranteed not to include the given <em>keys</em>.</p>","abstract":false,"args":[{"name":"keys","external_name":"keys","restriction":""}],"args_string":"(*keys)","args_html":"(*keys)","location":{"filename":"src/permafrost/map.cr","line_number":719,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L719"},"def":{"name":"reject","args":[{"name":"keys","external_name":"keys","restriction":""}],"splat_index":0,"visibility":"Public","body":"self.reject(keys)"}},{"html_id":"same?(other:Map(K,V)):Bool-instance-method","name":"same?","doc":"Returns `true` if `self` and *other* refer to the same map in memory.\n\nDue to the way `Map` is implemented, this method can be used as\na cheap way to detect changes.\n\n```\nmap1 = Pf::Map[foo: 123, bar: 456]\nmap2 = map1.assoc(\"foo\", 123)\nmap1.same?(map2) # => true\n```","summary":"<p>Returns <code>true</code> if <code>self</code> and <em>other</em> refer to the same map in memory.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Map(K, V)"}],"args_string":"(other : Map(K, V)) : Bool","args_html":"(other : <a href=\"../Pf/Map.html\">Map</a>(K, V)) : Bool","location":{"filename":"src/permafrost/map.cr","line_number":812,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L812"},"def":{"name":"same?","args":[{"name":"other","external_name":"other","restriction":"Map(K, V)"}],"return_type":"Bool","visibility":"Public","body":"object_id == other.object_id"}},{"html_id":"select(&:Tuple(K,V)->Bool):Map(K,V)-instance-method","name":"select","doc":"Returns a copy of `self` which includes only associations for which\nthe block is *truthy*.\n\n*Supports value equality.*\n\n```\nmap = Pf::Map[foo: 2, bar: 3, baz: 4, boo: 5]\nmap.select { |_, v| v.even? } # => Pf::Map{\"foo\" => 2, \"baz\" => 4}\n```","summary":"<p>Returns a copy of <code>self</code> which includes only associations for which the block is <em>truthy</em>.</p>","abstract":false,"location":{"filename":"src/permafrost/map.cr","line_number":665,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L665"},"def":{"name":"select","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(::Tuple(K, V) -> Bool)"},"return_type":"Map(K, V)","visibility":"Public","body":"transaction do |commit|\n  each do |k, v|\n    if yield({k, v})\n    else\n      commit.dissoc(k)\n    end\n  end\nend"}},{"html_id":"select(keys:Enumerable)-instance-method","name":"select","doc":"Returns a new map which includes only associations with the given *keys*.\n\n```\nmap = Pf::Map[foo: 2, bar: 3, baz: 4, boo: 5]\nmap.select({\"foo\", \"boo\"}) # => Pf::Map{\"foo\" => 2, \"boo\" => 5}\nmap.select(\"foo\", \"boo\")   # => Pf::Map{\"foo\" => 2, \"boo\" => 5}\n```","summary":"<p>Returns a new map which includes only associations with the given <em>keys</em>.</p>","abstract":false,"args":[{"name":"keys","external_name":"keys","restriction":"Enumerable"}],"args_string":"(keys : Enumerable)","args_html":"(keys : <a href=\"../Enumerable.html\">Enumerable</a>)","location":{"filename":"src/permafrost/map.cr","line_number":678,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L678"},"def":{"name":"select","args":[{"name":"keys","external_name":"keys","restriction":"Enumerable"}],"visibility":"Public","body":"Map(K, V).transaction do |commit|\n  keys.each do |key|\n    if value = self[key]?\n    else\n      next\n    end\n    commit.assoc(key, value)\n  end\nend"}},{"html_id":"select(*keys)-instance-method","name":"select","doc":"Returns a new map which includes only associations with the given *keys*.\n\n```\nmap = Pf::Map[foo: 2, bar: 3, baz: 4, boo: 5]\nmap.select({\"foo\", \"boo\"}) # => Pf::Map{\"foo\" => 2, \"boo\" => 5}\nmap.select(\"foo\", \"boo\")   # => Pf::Map{\"foo\" => 2, \"boo\" => 5}\n```","summary":"<p>Returns a new map which includes only associations with the given <em>keys</em>.</p>","abstract":false,"args":[{"name":"keys","external_name":"keys","restriction":""}],"args_string":"(*keys)","args_html":"(*keys)","location":{"filename":"src/permafrost/map.cr","line_number":688,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L688"},"def":{"name":"select","args":[{"name":"keys","external_name":"keys","restriction":""}],"splat_index":0,"visibility":"Public","body":"self.select(keys)"}},{"html_id":"size:Int32-instance-method","name":"size","doc":"Returns the number of associations in this map.","summary":"<p>Returns the number of associations in this map.</p>","abstract":false,"location":{"filename":"src/permafrost/map.cr","line_number":235,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L235"},"def":{"name":"size","return_type":"Int32","visibility":"Public","body":"@size"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/permafrost/map.cr","line_number":887,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L887"},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"Pf::Map{\"\njoin(io, \", \") do |__temp_49|\n  k, v = __temp_49\n  k.inspect(io)\n  io << \" => \"\n  v.inspect(io)\nend\nio << \"}\"\n"}},{"html_id":"transaction(&:Commit(K,V)->):Map(K,V)-instance-method","name":"transaction","doc":"Yields a `Commit` object which allows you to mutate a copy of `self`.\n\n- The commit object is marked as *resolved* after the block. You should not\n  retain it. If you do, all operations on the object (including readonly ones)\n  will raise `ResolvedError`.\n\n- If you pass the commit object to another fiber in the block, e.g. via\n  a channel, and fiber yield immediately after that, the commit obviously\n  would not be marked as *resolved* as the resolution code would not have\n  been reached yet. However, if you then attempt to call mutation methods\n  on the commit, another error, `ReadonlyError`, will be raised. *In other\n  words, the yielded commit object is readonly for any other fiber except\n  for the fiber that it was originally yielded to*.\n\nReturns `self` if the transaction did not *touch* the map. If the map was\nchanged but then the changes were reverted this method will return a new map.\n\n```\nmap1 = Pf::Map(String, Int32).new\nmap2 = map1.transaction do |commit|\n  commit.assoc(\"John Doe\", 12)\n  commit.assoc(\"Susan Doe\", 34)\n  commit.dissoc(\"John Doe\")\n  if \"John Doe\".in?(commit)\n    commit.assoc(\"Mark Doe\", 21)\n  else\n    commit.assoc(\"John Doe\", 456)\n    commit.assoc(\"Susan Doe\", commit[\"Susan Doe\"] + 1)\n  end\nend\nmap1 # => Pf::Map[]\nmap2 # => Pf::Map[\"John Doe\" => 456, \"Susan Doe\" => 35]\n```","summary":"<p>Yields a <code><a href=\"../Pf/Map/Commit.html\">Commit</a></code> object which allows you to mutate a copy of <code>self</code>.</p>","abstract":false,"location":{"filename":"src/permafrost/map.cr","line_number":314,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L314"},"def":{"name":"transaction","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Commit(K, V) ->)"},"return_type":"Map(K, V)","visibility":"Public","body":"commit = Commit.new(self, Core.fiber_id)\nyield commit\ncommit.resolve\n"}},{"html_id":"update(key:K,default:V,&:V->V)-instance-method","name":"update","doc":"Returns an updated copy of `self`.\n\n- If there is no association for *key*, the copy contains an association\n  between *key* and *default*.\n\n- If there is an association for *key*, its value is yielded to the block\n  and the return value of the block is used as the next value of *key*.\n\n*Supports value equality.*\n\n```\nmap = Pf::Map[foo: 100, bar: 200]\nmap.update(\"foo\", 0, &.succ) # => Pf::Map{\"foo\" => 101, \"bar\" => 200}\nmap.update(\"baz\", 0, &.succ) # => Pf::Map{\"foo\" => 100, \"bar\" => 200, \"baz\" => 0}\n```","summary":"<p>Returns an updated copy of <code>self</code>.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"K"},{"name":"default","external_name":"default","restriction":"V"}],"args_string":"(key : K, default : V, & : V -> V)","args_html":"(key : K, default : V, & : V -> V)","location":{"filename":"src/permafrost/map.cr","line_number":547,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L547"},"def":{"name":"update","args":[{"name":"key","external_name":"key","restriction":"K"},{"name":"default","external_name":"default","restriction":"V"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(V -> V)"},"visibility":"Public","body":"value = fetch(key) do\n  return assoc(key, default)\nend\nassoc(key, yield value)\n"}},{"html_id":"values:Array(V)-instance-method","name":"values","doc":"Returns an array with all values from this map. There is no\nguaranteed order of values.\n\n```\nmap = Pf::Map[foo: 10, bar: 20]\nmap.values # => [10, 20]\n```","summary":"<p>Returns an array with all values from this map.</p>","abstract":false,"location":{"filename":"src/permafrost/map.cr","line_number":362,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L362"},"def":{"name":"values","return_type":"Array(V)","visibility":"Public","body":"values = Array(V).new(size)\neach_value do |key|\n  values << key\nend\nvalues\n"}}],"types":[{"html_id":"permafrost/Pf/Map/Commit","path":"Pf/Map/Commit.html","kind":"class","full_name":"Pf::Map::Commit(K, V)","name":"Commit","abstract":false,"superclass":{"html_id":"permafrost/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"permafrost/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"permafrost/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/permafrost/map.cr","line_number":163,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L163"}],"repository_name":"permafrost","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"permafrost/Pf/Map","kind":"struct","full_name":"Pf::Map(K, V)","name":"Map"},"doc":"Commits allow you to compose multiple edits into one, big edit of the map.\nThus you avoid creating many useless intermediate copies of the map.","summary":"<p>Commits allow you to compose multiple edits into one, big edit of the map.</p>","instance_methods":[{"html_id":"[](key:K):V-instance-method","name":"[]","doc":"Runs `Map#[]` on the map built so far.","summary":"<p>Runs <code><a href=\"../../Pf/Map.html#%5B%5D%28key%3AK%29%3AV-instance-method\">Map#[]</a></code> on the map built so far.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"K"}],"args_string":"(key : K) : V","args_html":"(key : K) : V","location":{"filename":"src/permafrost/map.cr","line_number":187,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L187"},"def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"K"}],"return_type":"V","visibility":"Public","body":"@map[key]"}},{"html_id":"[]?(key:K):V|Nil-instance-method","name":"[]?","doc":"Runs `Map#[]?` on the map built so far.","summary":"<p>Runs <code><a href=\"../../Pf/Map.html#%5B%5D%3F%28key%3AK%29%3AV%7CNil-instance-method\">Map#[]?</a></code> on the map built so far.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"K"}],"args_string":"(key : K) : V | Nil","args_html":"(key : K) : V | Nil","location":{"filename":"src/permafrost/map.cr","line_number":182,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L182"},"def":{"name":"[]?","args":[{"name":"key","external_name":"key","restriction":"K"}],"return_type":"V | ::Nil","visibility":"Public","body":"@map[key]?"}},{"html_id":"assoc(key:K,value:V):self-instance-method","name":"assoc","doc":"Commits the association between *key* and *value* to the map.\n\nRaises `ResolvedError` if this commit is used outside of the transaction\n(see `Map#transaction`) that produced it.\n\nRaises `ReadonlyError` if called by a fiber other than the fiber that\ninitiated the transaction.","summary":"<p>Commits the association between <em>key</em> and <em>value</em> to the map.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"K"},{"name":"value","external_name":"value","restriction":"V"}],"args_string":"(key : K, value : V) : self","args_html":"(key : K, value : V) : <span class=\"k\">self</span>","location":{"filename":"src/permafrost/map.cr","line_number":198,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L198"},"def":{"name":"assoc","args":[{"name":"key","external_name":"key","restriction":"K"},{"name":"value","external_name":"value","restriction":"V"}],"return_type":"self","visibility":"Public","body":"if @resolved\n  raise(ResolvedError.new)\nend\nif @fiber == Core.fiber_id\nelse\n  raise(ReadonlyError.new)\nend\n@map = @map.assoc!(key, value, @id)\nself\n"}},{"html_id":"dissoc(key:K):self-instance-method","name":"dissoc","doc":"Commits the removal of an association between *key* and *value* from\nthe map.\n\nRaises `ResolvedError` if this commit is used outside of the transaction\n(see `Map#transaction`) that produced it.\n\nRaises `ReadonlyError` if called by a fiber other than the fiber that\ninitiated the transaction.","summary":"<p>Commits the removal of an association between <em>key</em> and <em>value</em> from the map.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"K"}],"args_string":"(key : K) : self","args_html":"(key : K) : <span class=\"k\">self</span>","location":{"filename":"src/permafrost/map.cr","line_number":215,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L215"},"def":{"name":"dissoc","args":[{"name":"key","external_name":"key","restriction":"K"}],"return_type":"self","visibility":"Public","body":"if @resolved\n  raise(ResolvedError.new)\nend\nif @fiber == Core.fiber_id\nelse\n  raise(ReadonlyError.new)\nend\n@map = @map.dissoc!(key, @id)\nself\n"}},{"html_id":"includes?(object):Bool-instance-method","name":"includes?","doc":"Runs `Map#includes?` on the map built so far.","summary":"<p>Runs <code><a href=\"../../Pf/Map.html#includes%3F%28key%3AK%29%3ABool-instance-method\">Map#includes?</a></code> on the map built so far.</p>","abstract":false,"args":[{"name":"object","external_name":"object","restriction":""}],"args_string":"(object) : Bool","args_html":"(object) : Bool","location":{"filename":"src/permafrost/map.cr","line_number":177,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/map.cr#L177"},"def":{"name":"includes?","args":[{"name":"object","external_name":"object","restriction":""}],"return_type":"Bool","visibility":"Public","body":"@map.includes?(object)"}}]}]},{"html_id":"permafrost/Pf/ReadonlyError","path":"Pf/ReadonlyError.html","kind":"class","full_name":"Pf::ReadonlyError","name":"ReadonlyError","abstract":false,"superclass":{"html_id":"permafrost/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"permafrost/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"permafrost/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"permafrost/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/permafrost/error.cr","line_number":5,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/error.cr#L5"}],"repository_name":"permafrost","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"permafrost/Pf","kind":"module","full_name":"Pf","name":"Pf"}},{"html_id":"permafrost/Pf/ResolvedError","path":"Pf/ResolvedError.html","kind":"class","full_name":"Pf::ResolvedError","name":"ResolvedError","abstract":false,"superclass":{"html_id":"permafrost/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"permafrost/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"permafrost/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"permafrost/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/permafrost/error.cr","line_number":2,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/error.cr#L2"}],"repository_name":"permafrost","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"permafrost/Pf","kind":"module","full_name":"Pf","name":"Pf"}},{"html_id":"permafrost/Pf/Set","path":"Pf/Set.html","kind":"struct","full_name":"Pf::Set(T)","name":"Set","abstract":false,"superclass":{"html_id":"permafrost/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"permafrost/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"permafrost/Pf/Core","kind":"module","full_name":"Pf::Core","name":"Core"},{"html_id":"permafrost/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"permafrost/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"permafrost/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/permafrost/set.cr","line_number":5,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/set.cr#L5"}],"repository_name":"permafrost","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"permafrost/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"permafrost/Pf/Core","kind":"module","full_name":"Pf::Core","name":"Core"}],"namespace":{"html_id":"permafrost/Pf","kind":"module","full_name":"Pf","name":"Pf"},"doc":"A thread-safe, persistent, unordered set.\n\nSee also: `Map`.","summary":"<p>A thread-safe, persistent, unordered set.</p>","class_methods":[{"html_id":"[](*elements)-class-method","name":"[]","doc":"Returns a new set with the given *elements*.\n\nThe type of the returned set is the union of the types of *elements*.\n\n```\nset = Pf::Set[1, \"Hello\", 3, true]\nset # => Pf::Set[1, \"Hello\", 3, true]\n\ntypeof(set) # => Pf::Set(String | Int32 | Bool)\n```","summary":"<p>Returns a new set with the given <em>elements</em>.</p>","abstract":false,"args":[{"name":"elements","external_name":"elements","restriction":""}],"args_string":"(*elements)","args_html":"(*elements)","location":{"filename":"src/permafrost/set.cr","line_number":229,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/set.cr#L229"},"def":{"name":"[]","args":[{"name":"elements","external_name":"elements","restriction":""}],"splat_index":0,"visibility":"Public","body":"Set(typeof(Enumerable.element_type(elements))).new.concat(elements)"}},{"html_id":"transaction(&:Commit(T)->Commit(T)):Set(T)-class-method","name":"transaction","doc":"Shorthand for `new.transaction`.","summary":"<p>Shorthand for <code>new.transaction</code>.</p>","abstract":false,"location":{"filename":"src/permafrost/set.cr","line_number":210,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/set.cr#L210"},"def":{"name":"transaction","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Commit(T) -> Commit(T))"},"return_type":"Set(T)","visibility":"Public","body":"new.transaction do |commit|\n  yield commit\nend"}}],"constructors":[{"html_id":"additive_identity:self-class-method","name":"additive_identity","abstract":false,"location":{"filename":"src/permafrost/set.cr","line_number":185,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/set.cr#L185"},"def":{"name":"additive_identity","return_type":"self","visibility":"Public","body":"Set(T).new"}},{"html_id":"new(enumerable:Enumerable(T)):Set(T)-class-method","name":"new","doc":"Returns a new set containing elements from *enumerable*.\n\n```\nset = Pf::Set.new([1, 2, 3])\nset # => Pf::Set[1, 2, 3]\n```","summary":"<p>Returns a new set containing elements from <em>enumerable</em>.</p>","abstract":false,"args":[{"name":"enumerable","external_name":"enumerable","restriction":"Enumerable(T)"}],"args_string":"(enumerable : Enumerable(T)) : Set(T)","args_html":"(enumerable : <a href=\"../Enumerable.html\">Enumerable</a>(T)) : <a href=\"../Pf/Set.html\">Set</a>(T)","location":{"filename":"src/permafrost/set.cr","line_number":205,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/set.cr#L205"},"def":{"name":"new","args":[{"name":"enumerable","external_name":"enumerable","restriction":"Enumerable(T)"}],"return_type":"Set(T)","visibility":"Public","body":"Set(T).new.concat(enumerable)"}},{"html_id":"new:Set(T)-class-method","name":"new","doc":"Returns a new, empty set.\n\n```\nset = Pf::Set(Int32).new\nset.empty? => true\n```","summary":"<p>Returns a new, empty set.</p>","abstract":false,"location":{"filename":"src/permafrost/set.cr","line_number":195,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/set.cr#L195"},"def":{"name":"new","return_type":"Set(T)","visibility":"Public","body":"new(node: Node(T).new, size: 0)"}}],"instance_methods":[{"html_id":"&(other:Set(T))-instance-method","name":"&","doc":"Returns a new set containing elements common to this and *other* sets.\n\n```\na = Pf::Set[1, 2, 3]\nb = Pf::Set[4, 5, 1, 6, 2]\na & b # => Pf::Set[1, 2]\n```","summary":"<p>Returns a new set containing elements common to this and <em>other</em> sets.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Set(T)"}],"args_string":"(other : Set(T))","args_html":"(other : <a href=\"../Pf/Set.html\">Set</a>(T))","location":{"filename":"src/permafrost/set.cr","line_number":390,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/set.cr#L390"},"def":{"name":"&","args":[{"name":"other","external_name":"other","restriction":"Set(T)"}],"visibility":"Public","body":"smaller, larger = size <= other.size ? {self, other} : {other, self}\nsmaller.select do |element|\n  element.in?(larger)\nend\n"}},{"html_id":"+(other):Set(T)-instance-method","name":"+","doc":"Shorthand for `concat`.","summary":"<p>Shorthand for <code><a href=\"../Pf/Set.html#concat%28other%3AEnumerable%28T%29%29%3ASet%28T%29-instance-method\">#concat</a></code>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other) : Set(T)","args_html":"(other) : <a href=\"../Pf/Set.html\">Set</a>(T)","location":{"filename":"src/permafrost/set.cr","line_number":466,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/set.cr#L466"},"def":{"name":"+","args":[{"name":"other","external_name":"other","restriction":""}],"return_type":"Set(T)","visibility":"Public","body":"concat(other)"}},{"html_id":"==(other:Set)-instance-method","name":"==","doc":"Returns `true` if the sets are equal.","summary":"<p>Returns <code>true</code> if the sets are equal.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Set"}],"args_string":"(other : Set)","args_html":"(other : <a href=\"../Pf/Set.html\">Set</a>)","location":{"filename":"src/permafrost/set.cr","line_number":528,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/set.cr#L528"},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"Set"}],"visibility":"Public","body":"if same?(other)\n  return true\nend\nif @size == other.size\nelse\n  return false\nend\nall?(&.in?(other))\n"}},{"html_id":"===(object:T):Bool-instance-method","name":"===","doc":"Same as `Set#===`.\n\n```\nreds = Pf::Set[\"red\", \"pink\", \"violet\"]\nblues = Pf::Set[\"blue\", \"azure\", \"violet\"]\n\nboth = red = blue = false\n\ncase \"violet\"\nwhen reds & blues\n  both = true\nwhen reds\n  red = true\nwhen blues\n  blue = true\nend\n\nboth # => true\nred  # => false\nblue # => false\n```","summary":"<p>Same as <code><a href=\"../Pf/Set.html#%3D%3D%3D%28object%3AT%29%3ABool-instance-method\">Set#===</a></code>.</p>","abstract":false,"args":[{"name":"object","external_name":"object","restriction":"T"}],"args_string":"(object : T) : Bool","args_html":"(object : T) : Bool","location":{"filename":"src/permafrost/set.cr","line_number":508,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/set.cr#L508"},"def":{"name":"===","args":[{"name":"object","external_name":"object","restriction":"T"}],"return_type":"Bool","visibility":"Public","body":"includes?(object)"}},{"html_id":"add(element:T):Set(T)-instance-method","name":"add","doc":"Returns a copy of this set that includes *element*.\n\n*Supports value equality*.\n\n```\nset = Pf::Set[100, 200]\nset.add(300) # => Pf::Set[100, 200, 300]\nset.add(400) # => Pf::Set[100, 200, 400]\n```","summary":"<p>Returns a copy of this set that includes <em>element</em>.</p>","abstract":false,"args":[{"name":"element","external_name":"element","restriction":"T"}],"args_string":"(element : T) : Set(T)","args_html":"(element : T) : <a href=\"../Pf/Set.html\">Set</a>(T)","location":{"filename":"src/permafrost/set.cr","line_number":404,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/set.cr#L404"},"def":{"name":"add","args":[{"name":"element","external_name":"element","restriction":"T"}],"return_type":"Set(T)","visibility":"Public","body":"added, node = @node.add(Probes::Add.new(element))\nadded ? Set.new(node, @size + 1) : self\n"}},{"html_id":"concat(other:Enumerable(T)):Set(T)-instance-method","name":"concat","doc":"Returns a copy of this set that also includes elements from\n*other* enumerable.\n\n*Supports value equality*.\n\n```\na = Pf::Set[1, 2, 3]\na.concat([4, 5, 1, 2]) # => Pf::Set[1, 2, 3, 4, 5]\n```","summary":"<p>Returns a copy of this set that also includes elements from <em>other</em> enumerable.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Enumerable(T)"}],"args_string":"(other : Enumerable(T)) : Set(T)","args_html":"(other : <a href=\"../Enumerable.html\">Enumerable</a>(T)) : <a href=\"../Pf/Set.html\">Set</a>(T)","location":{"filename":"src/permafrost/set.cr","line_number":456,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/set.cr#L456"},"def":{"name":"concat","args":[{"name":"other","external_name":"other","restriction":"Enumerable(T)"}],"return_type":"Set(T)","visibility":"Public","body":"transaction do |commit|\n  other.each do |element|\n    commit.add(element)\n  end\n  commit\nend"}},{"html_id":"delete(element:T):Set(T)-instance-method","name":"delete","doc":"Returns a copy of this set that is guaranteed not to include\n*element*.\n\n*Supports value equality*.\n\n```\nset = Pf::Set[100, 200, 300]\nset.delete(100) # => Pf::Set[200, 300]\nset.delete(200) # => Pf::Set[100, 300]\n```","summary":"<p>Returns a copy of this set that is guaranteed not to include <em>element</em>.</p>","abstract":false,"args":[{"name":"element","external_name":"element","restriction":"T"}],"args_string":"(element : T) : Set(T)","args_html":"(element : T) : <a href=\"../Pf/Set.html\">Set</a>(T)","location":{"filename":"src/permafrost/set.cr","line_number":424,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/set.cr#L424"},"def":{"name":"delete","args":[{"name":"element","external_name":"element","restriction":"T"}],"return_type":"Set(T)","visibility":"Public","body":"removed, node = @node.delete(Probes::Delete.new(element))\nremoved ? Set.new(node, @size - 1) : self\n"}},{"html_id":"each(&:T->):Nil-instance-method","name":"each","doc":"Yields each element from this set.","summary":"<p>Yields each element from this set.</p>","abstract":false,"location":{"filename":"src/permafrost/set.cr","line_number":267,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/set.cr#L267"},"def":{"name":"each","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(T ->)"},"return_type":"Nil","visibility":"Public","body":"@node.each do |element|\n  yield element\nend"}},{"html_id":"empty?:Bool-instance-method","name":"empty?","doc":"Returns `true` if this set is empty.\n\n```\nset = Pf::Set(Int32).new\nset.empty? # => true\n\nnewset = set.add(100)\nnewset.empty? # => false\n```","summary":"<p>Returns <code>true</code> if this set is empty.</p>","abstract":false,"location":{"filename":"src/permafrost/set.cr","line_number":242,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/set.cr#L242"},"def":{"name":"empty?","return_type":"Bool","visibility":"Public","body":"@size.zero?"}},{"html_id":"fmap(&:T->U):Set(U)forallU-instance-method","name":"fmap","doc":"Yields each element from this set to the block and constructs\na new set from block return results.\n\nSupports value equality if `T == U`.\n\nThere is no shortcut in terms of performance. Even if all elements produced\nby the block are already in this set, a new set is created and populated\nanyway. We do keep track of changes, and if none were made return `self`;\nthe new set is then simply discarded.\n\n```\nset = Pf::Set[1, 2, 3]\nset.fmap(&.succ.to_s)            # => Pf::Set[\"2\", \"3\", \"4\"]\nset.fmap(&.succ.pred).same?(set) # => true\n```","summary":"<p>Yields each element from this set to the block and constructs a new set from block return results.</p>","abstract":false,"location":{"filename":"src/permafrost/set.cr","line_number":328,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/set.cr#L328"},"def":{"name":"fmap","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(T -> U)"},"return_type":"Set(U)","visibility":"Public","body":"{% if T == U %}\n        same = true\n        set = Set(U).transaction do |commit|\n          each do |element|\n            newelement = yield element\n            commit.add(newelement)\n            next if newelement.in?(self)\n            same = false\n          end\n          commit\n        end\n        same ? self : set\n      {% else %}\n        Set(U).transaction do |commit|\n          each do |element|\n            commit.add(yield element)\n          end\n          commit\n        end\n      {% end %}"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`.","summary":"<p>See <code>Object#hash(hasher)</code>.</p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","location":{"filename":"src/permafrost/set.cr","line_number":541,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/set.cr#L541"},"def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"result = hasher.result\ncopy = hasher\ncopy = self.class.hash(copy)\nresult = result &+ copy.result\neach do |element|\n  copy = hasher\n  copy = element.hash(copy)\n  result = result &+ copy.result\nend\nresult.hash(hasher)\n"}},{"html_id":"includes?(element:T):Bool-instance-method","name":"includes?","doc":"Returns `true` if *element* is present in this set.\n\n```\nset = Pf::Set[1, 2, 3]\n\n1.in?(set)        # => true\n2.in?(set)        # => true\n3.in?(set)        # => true\n100.in?(set)      # => false\n\"foobar\".in?(set) # => false\n```","summary":"<p>Returns <code>true</code> if <em>element</em> is present in this set.</p>","abstract":false,"args":[{"name":"element","external_name":"element","restriction":"T"}],"args_string":"(element : T) : Bool","args_html":"(element : T) : Bool","location":{"filename":"src/permafrost/set.cr","line_number":257,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/set.cr#L257"},"def":{"name":"includes?","args":[{"name":"element","external_name":"element","restriction":"T"}],"return_type":"Bool","visibility":"Public","body":"!(!(@node.fetch?(Probes::Includes.new(element))))"}},{"html_id":"inspect(io:IO):Nil-instance-method","name":"inspect","doc":"Alias of `#to_s`.","summary":"<p>Alias of <code><a href=\"../Pf/Set.html#to_s%28io%29-instance-method\">#to_s</a></code>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/permafrost/set.cr","line_number":513,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/set.cr#L513"},"def":{"name":"inspect","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"to_s(io)"}},{"html_id":"pretty_print(pp):Nil-instance-method","name":"pretty_print","abstract":false,"args":[{"name":"pp","external_name":"pp","restriction":""}],"args_string":"(pp) : Nil","args_html":"(pp) : Nil","location":{"filename":"src/permafrost/set.cr","line_number":523,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/set.cr#L523"},"def":{"name":"pretty_print","args":[{"name":"pp","external_name":"pp","restriction":""}],"return_type":"Nil","visibility":"Public","body":"pp.list(\"Pf::Set[\", self, \"]\")"}},{"html_id":"reject(&:T->):Set(T)-instance-method","name":"reject","doc":"Returns a new set that includes only elements for which the\nblock is *falsey*.\n\n*Supports value equality*.\n\n```\nset = (0...10).to_pf_set\nset.reject(&.even?) # => Pf::Set[1, 3, 5, 7, 9]\n```","summary":"<p>Returns a new set that includes only elements for which the block is <em>falsey</em>.</p>","abstract":false,"location":{"filename":"src/permafrost/set.cr","line_number":379,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/set.cr#L379"},"def":{"name":"reject","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(T ->)"},"return_type":"Set(T)","visibility":"Public","body":"self.select do |element|\n  !(yield element)\nend"}},{"html_id":"same?(other:Set(T))-instance-method","name":"same?","doc":"Returns `true` if `self` and *other* refer to the same set in memory.\n\nDue to the way `Set` is implemented, this method can be used as\na cheap way to detect changes.\n\n```\nset1 = Pf::Set[1, 2, 3]\nset2 = set1.add(1).add(2).add(3)\nset1.same?(set2) # => true\n```","summary":"<p>Returns <code>true</code> if <code>self</code> and <em>other</em> refer to the same set in memory.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Set(T)"}],"args_string":"(other : Set(T))","args_html":"(other : <a href=\"../Pf/Set.html\">Set</a>(T))","location":{"filename":"src/permafrost/set.cr","line_number":483,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/set.cr#L483"},"def":{"name":"same?","args":[{"name":"other","external_name":"other","restriction":"Set(T)"}],"visibility":"Public","body":"@node.same?(other.@node)"}},{"html_id":"select(&:T->):Set(T)-instance-method","name":"select","doc":"Returns a new set that includes only elements for which the\nblock is *truthy*.\n\n*Supports value equality*.\n\n```\nset = (0...10).to_pf_set\nset.select(&.even?) # => Pf::Set[0, 2, 4, 6, 8]\n```","summary":"<p>Returns a new set that includes only elements for which the block is <em>truthy</em>.</p>","abstract":false,"location":{"filename":"src/permafrost/set.cr","line_number":360,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/set.cr#L360"},"def":{"name":"select","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(T ->)"},"return_type":"Set(T)","visibility":"Public","body":"transaction do |commit|\n  each do |element|\n    if yield element\n      next\n    end\n    commit.delete(element)\n  end\n  commit\nend"}},{"html_id":"size:Int32-instance-method","name":"size","doc":"Returns the number of elements in this set.\n\n```\nset = Pf::Set[1, 5]\nset.size # => 2\n```","summary":"<p>Returns the number of elements in this set.</p>","abstract":false,"location":{"filename":"src/permafrost/set.cr","line_number":180,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/set.cr#L180"},"def":{"name":"size","return_type":"Int32","visibility":"Public","body":"@size"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/permafrost/set.cr","line_number":517,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/set.cr#L517"},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"Pf::Set[\"\njoin(io, \", \")\nio << \"]\"\n"}},{"html_id":"transaction(&:Commit(T)->):Set(T)-instance-method","name":"transaction","doc":"Yields a `Commit` object which you can populate by multiple edits of\nthis set. Applies the commit to a copy of this set. Returns the copy.\n\n- The commit object is marked as *resolved* after the block. You should not\n  retain it. If you do, all operations on the object (including readonly ones)\n  will raise `ResolvedError`.\n\n- If you pass the commit object to another fiber in the block, e.g. via\n  a channel, and fiber yield immediately after that, the commit obviously\n  would not be marked as *resolved* as the resolution code would not have\n  been reached yet. However, if you then attempt to call mutation methods\n  on the commit, another error, `ReadonlyError`, will be raised. *In other\n  words, the yielded commit object is readonly for any other fiber except\n  for the fiber that it was originally yielded to*.\n\nReturns `self` if the transaction did not *touch* the set. If the set was\nchanged but then the changes were reverted this method will return a new set.\n\n```\nset1 = Pf::Set[1, 2, 3]\nset2 = set1.transaction do |commit|\n  commit.add(4)\n  commit.delete(2) if 4.in?(commit)\n  if 2.in?(commit)\n    commit.delete(4)\n    commit.add(6)\n  else\n    commit.delete(4)\n    commit.add(2)\n    commit.add(5)\n  end\nend\n\nset1 # => Pf::Set[1, 2, 3]\nset2 # => Pf::Set[1, 2, 3, 5]\n```","summary":"<p>Yields a <code><a href=\"../Pf/Set/Commit.html\">Commit</a></code> object which you can populate by multiple edits of this set.</p>","abstract":false,"location":{"filename":"src/permafrost/set.cr","line_number":307,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/set.cr#L307"},"def":{"name":"transaction","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Commit(T) ->)"},"return_type":"Set(T)","visibility":"Public","body":"commit = Commit.new(self, Core.fiber_id)\nyield commit\ncommit.resolve\n"}}],"types":[{"html_id":"permafrost/Pf/Set/Commit","path":"Pf/Set/Commit.html","kind":"class","full_name":"Pf::Set::Commit(T)","name":"Commit","abstract":false,"superclass":{"html_id":"permafrost/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"permafrost/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"permafrost/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/permafrost/set.cr","line_number":114,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/set.cr#L114"}],"repository_name":"permafrost","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"permafrost/Pf/Set","kind":"struct","full_name":"Pf::Set(T)","name":"Set"},"doc":"Commits allow you to compose multiple edits into one, big edit of the set.\nThus you avoid creating many useless intermediate copies of the set.","summary":"<p>Commits allow you to compose multiple edits into one, big edit of the set.</p>","instance_methods":[{"html_id":"add(element:T):self-instance-method","name":"add","doc":"Commits the addition of *element* to the set.\n\nRaises `ResolvedError` if this commit is used outside of the transaction\n(see `Set#transaction`) that produced it.\n\nRaises `ReadonlyError` if called by a fiber other than the fiber that\ninitiated the transaction.","summary":"<p>Commits the addition of <em>element</em> to the set.</p>","abstract":false,"args":[{"name":"element","external_name":"element","restriction":"T"}],"args_string":"(element : T) : self","args_html":"(element : T) : <span class=\"k\">self</span>","location":{"filename":"src/permafrost/set.cr","line_number":139,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/set.cr#L139"},"def":{"name":"add","args":[{"name":"element","external_name":"element","restriction":"T"}],"return_type":"self","visibility":"Public","body":"if @resolved\n  raise(ResolvedError.new)\nend\nif @fiber == Core.fiber_id\nelse\n  raise(ReadonlyError.new)\nend\n@set = @set.add!(element, @id)\nself\n"}},{"html_id":"delete(element:T):self-instance-method","name":"delete","doc":"Commits the removal of *element* from the set.\n\nRaises `ResolvedError` if this commit is used outside of the transaction\n(see `Set#transaction`) that produced it.\n\nRaises `ReadonlyError` if called by a fiber other than the fiber that\ninitiated the transaction.","summary":"<p>Commits the removal of <em>element</em> from the set.</p>","abstract":false,"args":[{"name":"element","external_name":"element","restriction":"T"}],"args_string":"(element : T) : self","args_html":"(element : T) : <span class=\"k\">self</span>","location":{"filename":"src/permafrost/set.cr","line_number":155,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/set.cr#L155"},"def":{"name":"delete","args":[{"name":"element","external_name":"element","restriction":"T"}],"return_type":"self","visibility":"Public","body":"if @resolved\n  raise(ResolvedError.new)\nend\nif @fiber == Core.fiber_id\nelse\n  raise(ReadonlyError.new)\nend\n@set = @set.delete!(element, @id)\nself\n"}},{"html_id":"includes?(object):Bool-instance-method","name":"includes?","doc":"Runs `Set#includes?` on the set built so far.","summary":"<p>Runs <code><a href=\"../../Pf/Set.html#includes%3F%28element%3AT%29%3ABool-instance-method\">Set#includes?</a></code> on the set built so far.</p>","abstract":false,"args":[{"name":"object","external_name":"object","restriction":""}],"args_string":"(object) : Bool","args_html":"(object) : Bool","location":{"filename":"src/permafrost/set.cr","line_number":128,"url":"https://github.com/homonoidian/permafrost/blob/d300340ef2c15c931cae60026d178ab491ef7003/src/permafrost/set.cr#L128"},"def":{"name":"includes?","args":[{"name":"object","external_name":"object","restriction":""}],"return_type":"Bool","visibility":"Public","body":"@set.includes?(object)"}}]}]}]}]}})